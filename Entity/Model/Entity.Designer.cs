//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 20/10/2017 15:55:33
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Context
{

    [DatabaseAttribute(Name = "miguelxamarinapp")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class DataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public DataContext() :
        base(@"User Id=adminmiguel123;Password=admin1234@;Host=mysql8.db4free.net;Port=3307;Database=miguelxamarinapp;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public DataContext(MappingSource mappingSource) :
        base(@"User Id=adminmiguel123;Password=admin1234@;Host=mysql8.db4free.net;Port=3307;Database=miguelxamarinapp;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace Context
{

    /// <summary>
    /// There are no comments for Context.User in the schema.
    /// </summary>
    [Table(Name = @"miguelxamarinapp.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private bool _Active;

        private string _Email;

        private int _IdUser;

        private string _Name;

        private string _Pass;

        private string _Surname;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnActiveChanging(bool value);
        partial void OnActiveChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPassChanging(string value);
        partial void OnPassChanged();
        partial void OnSurnameChanging(string value);
        partial void OnSurnameChanged();
        #endregion

        public User()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"active", Storage = "_Active", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging("Active");
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(250) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(250) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pass in the schema.
        /// </summary>
        [Column(Name = @"pass", Storage = "_Pass", CanBeNull = false, DbType = "VARCHAR(250) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pass
        {
            get
            {
                return this._Pass;
            }
            set
            {
                if (this._Pass != value)
                {
                    this.OnPassChanging(value);
                    this.SendPropertyChanging("Pass");
                    this._Pass = value;
                    this.SendPropertyChanged("Pass");
                    this.OnPassChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Surname in the schema.
        /// </summary>
        [Column(Name = @"surname", Storage = "_Surname", CanBeNull = false, DbType = "VARCHAR(250) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Surname
        {
            get
            {
                return this._Surname;
            }
            set
            {
                if (this._Surname != value)
                {
                    this.OnSurnameChanging(value);
                    this.SendPropertyChanging("Surname");
                    this._Surname = value;
                    this.SendPropertyChanged("Surname");
                    this.OnSurnameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
